use cooperative::graph::traffic_functions::bpr_traffic_function;
use cooperative::graph::MAX_BUCKETS;
use cooperative::io::io_graph::load_capacity_graph;
use cooperative::io::modification::filter_invalid_nodes_and_edges::filter_invalid_nodes_and_edges;
use cooperative::io::modification::{load_raw_graph_data, store_raw_data};
use cooperative::util::cli_args::parse_arg_required;
use rust_road_router::io::Load;
use std::env;
use std::error::Error;
use std::path::Path;

/// Final preprocession for a given OSM graph, generated by `RoutingKit`
///
/// Extracts the largest SCC, removes multi edges etc..
///
/// Additional parameters: <path_to_graph> <output_directory>
fn main() -> Result<(), Box<dyn Error>> {
    let (graph_directory, output_directory) = parse_required_args()?;
    let path = Path::new(&graph_directory);
    let output_path = Path::new(&output_directory);

    // load raw graph
    let raw_data = load_raw_graph_data(path)?;

    // load excluded nodes (by largest scc construction)
    let is_valid_node = Vec::<u32>::load_from(&path.join("largest_scc"))?.iter().map(|&i| i > 0).collect::<Vec<bool>>();

    // mark invalid edges (travel time >= 86_400_000 or capacity == 0)
    let is_valid_edge = (0..raw_data.head.len())
        .into_iter()
        .map(|i| raw_data.travel_time[i] < MAX_BUCKETS && raw_data.max_capacity[i] > 10)
        .collect::<Vec<bool>>();

    println!(
        "Retrieved all data, starting to reduce the graph. Original graph has {} nodes and {} edges",
        is_valid_node.len(),
        is_valid_edge.len()
    );
    let reduced_graph_data = filter_invalid_nodes_and_edges(&raw_data, &is_valid_node, &is_valid_edge);

    println!(
        "Reduced graph to {} nodes and {} edges",
        reduced_graph_data.first_out.len() - 1,
        reduced_graph_data.head.len()
    );

    store_raw_data(&reduced_graph_data, output_path)
}

fn parse_required_args() -> Result<(String, String), Box<dyn Error>> {
    let mut args = env::args().skip(1);

    let graph_directory = parse_arg_required(&mut args, "Graph Directory")?;
    let output_directory = parse_arg_required(&mut args, "Output Graph Directory")?;

    Ok((graph_directory, output_directory))
}
